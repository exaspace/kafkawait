import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'pl.allegro.tech.build.axion-release' version '1.10.1'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

description = 'Kafka Wait'

repositories {
    mavenCentral()
}

sourceSets {
    performanceTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/performance-test/java')
        }
        resources.srcDir file('src/performance-test/resources')
    }
}

configurations {
    performanceTestCompile.extendsFrom testCompile
    performanceTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'org.apache.kafka:kafka-clients:2.2.1'
    compile 'org.slf4j:slf4j-api:1.7.26'

    runtime 'ch.qos.logback:logback-classic:1.2.3'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'com.github.charithe:kafka-junit:4.1.5'
    testCompile 'org.eclipse.jetty:jetty-server:9.4.18.v20190429'
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.9.9'

    performanceTestCompile 'org.apache.httpcomponents:httpasyncclient:4.1.3'
}

scmVersion {
    tag {
        prefix = ""
    }
}

project.version = scmVersion.version

sourceCompatibility = 1.8

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

jar {
    baseName = "$project.name"
    version = "$project.version"
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task testJar(type: ShadowJar) {
    classifier = 'tests'
    from sourceSets.test.output
    configurations = [project.configurations.testRuntime]
}

task performanceTest(type: Test) {
    testClassesDirs = sourceSets.performanceTest.output.classesDirs
    classpath = sourceSets.performanceTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

task runDemoWebServer(type:JavaExec) {
    main = "org.exaspace.kafkawait.demo.CalculatorWebServer"
    classpath = sourceSets.test.runtimeClasspath
}

task runDemoEventProcessor(type: JavaExec) {
    main = "org.exaspace.kafkawait.demo.CalculatorEventProcessor"
    classpath = sourceSets.test.runtimeClasspath
}

check.dependsOn performanceTest
performanceTest.mustRunAfter test
